name: Hotfix Build and Release

on:
  push:
    branches:
      - 'hotfix/**'
  pull_request:
    branches:
      - 'main'
    types: [opened, synchronize, reopened]
    # Only trigger for PRs from hotfix branches
    paths-ignore:
      - '**.md'
      - 'docs/**'

env:
  DOTNET_VERSION: '8.0.x'
  BUILD_CONFIGURATION: 'Release'

jobs:
  validate-hotfix:
    name: Validate Hotfix Branch
    runs-on: ubuntu-latest
    if: startsWith(github.head_ref, 'hotfix/') || startsWith(github.ref, 'refs/heads/hotfix/')
    outputs:
      hotfix-version: ${{ steps.extract-version.outputs.hotfix-version }}
      target-version: ${{ steps.extract-version.outputs.target-version }}
      is-valid: ${{ steps.validate.outputs.is-valid }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Extract hotfix version
        id: extract-version
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            BRANCH_NAME="${{ github.head_ref }}"
          else
            BRANCH_NAME="${{ github.ref_name }}"
          fi
          
          echo "Branch name: $BRANCH_NAME"
          
          # Extract version from hotfix branch name (hotfix/v1.2.3)
          if [[ $BRANCH_NAME =~ ^hotfix/v([0-9]+\.[0-9]+\.[0-9]+)$ ]]; then
            HOTFIX_VERSION="${BASH_REMATCH[1]}"
            echo "hotfix-version=$HOTFIX_VERSION" >> $GITHUB_OUTPUT
            echo "target-version=$HOTFIX_VERSION" >> $GITHUB_OUTPUT
            echo "Hotfix version: $HOTFIX_VERSION"
          else
            echo "❌ Invalid hotfix branch name format. Expected: hotfix/v1.2.3"
            exit 1
          fi
      
      - name: Validate hotfix requirements
        id: validate
        run: |
          HOTFIX_VERSION="${{ steps.extract-version.outputs.hotfix-version }}"
          
          # Check if this is a valid patch version increment
          echo "Validating hotfix version: $HOTFIX_VERSION"
          
          # Get the latest tag to compare
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"
          
          # Extract version numbers
          LATEST_VERSION=$(echo $LATEST_TAG | sed 's/^v//')
          IFS='.' read -ra LATEST_PARTS <<< "$LATEST_VERSION"
          IFS='.' read -ra HOTFIX_PARTS <<< "$HOTFIX_VERSION"
          
          # Validate version format and increment
          if [ ${#HOTFIX_PARTS[@]} -ne 3 ]; then
            echo "❌ Hotfix version must have exactly 3 parts (major.minor.patch)"
            exit 1
          fi
          
          # Check if hotfix is a valid patch increment
          if [ "${HOTFIX_PARTS[0]}" = "${LATEST_PARTS[0]}" ] && 
             [ "${HOTFIX_PARTS[1]}" = "${LATEST_PARTS[1]}" ] && 
             [ "${HOTFIX_PARTS[2]}" -gt "${LATEST_PARTS[2]}" ]; then
            echo "✓ Valid hotfix version increment"
            echo "is-valid=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Hotfix version must be a patch increment of latest version"
            echo "Latest: $LATEST_VERSION, Hotfix: $HOTFIX_VERSION"
            exit 1
          fi

  build-and-test:
    name: Build and Test Hotfix
    runs-on: ubuntu-latest
    needs: validate-hotfix
    if: needs.validate-hotfix.outputs.is-valid == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
      
      - name: Update version
        shell: pwsh
        run: |
          $targetVersion = "${{ needs.validate-hotfix.outputs.target-version }}"
          $buildNumber = ${{ github.run_number }}
          $fullVersion = "$targetVersion.$buildNumber"
          
          Write-Host "Setting hotfix version: $fullVersion"
          
          # Update version.json
          $versionData = @{
            Major = [int]($targetVersion -split '\.')[0]
            Minor = [int]($targetVersion -split '\.')[1]
            Patch = [int]($targetVersion -split '\.')[2]
            Build = $buildNumber
            VersionString = $fullVersion
            IsPreRelease = $false
            PreReleaseTag = ""
          }
          
          $versionData | ConvertTo-Json | Set-Content -Path "version.json"
          Write-Host "Updated version.json:"
          Get-Content "version.json"
      
      - name: Restore dependencies
        run: dotnet restore src/SimpleWeatherList.sln
      
      - name: Build solution
        run: |
          dotnet build src/SimpleWeatherList.sln \
            --configuration ${{ env.BUILD_CONFIGURATION }} \
            --no-restore \
            --verbosity minimal
      
      - name: Run tests
        run: |
          dotnet test src/SimpleWeatherList.sln \
            --configuration ${{ env.BUILD_CONFIGURATION }} \
            --no-build \
            --verbosity minimal \
            --logger trx \
            --results-directory TestResults
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: hotfix-test-results
          path: TestResults/
      
      - name: Build Docker image
        run: |
          HOTFIX_VERSION="${{ needs.validate-hotfix.outputs.hotfix-version }}"
          BUILD_NUMBER="${{ github.run_number }}"
          FULL_VERSION="$HOTFIX_VERSION.$BUILD_NUMBER"
          
          docker build \
            --file src/SimpleWeatherList.Web/Dockerfile \
            --tag simple-weather-list:$FULL_VERSION \
            --tag simple-weather-list:hotfix-latest \
            src/
      
      - name: Create deployment artifacts
        run: |
          HOTFIX_VERSION="${{ needs.validate-hotfix.outputs.hotfix-version }}"
          BUILD_NUMBER="${{ github.run_number }}"
          FULL_VERSION="$HOTFIX_VERSION.$BUILD_NUMBER"
          
          # Publish application
          dotnet publish src/SimpleWeatherList.Web/SimpleWeatherList.Web.csproj \
            --configuration ${{ env.BUILD_CONFIGURATION }} \
            --output publish/ \
            --no-build
          
          # Create deployment package
          mkdir -p artifacts
          tar -czf artifacts/hotfix-$FULL_VERSION.tar.gz -C publish/ .
          
          # Create version info
          echo "VERSION=$FULL_VERSION" > artifacts/version.env
          echo "HOTFIX_VERSION=$HOTFIX_VERSION" >> artifacts/version.env
          echo "BUILD_NUMBER=$BUILD_NUMBER" >> artifacts/version.env
          echo "COMMIT_SHA=${{ github.sha }}" >> artifacts/version.env
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: hotfix-build-${{ needs.validate-hotfix.outputs.hotfix-version }}
          path: |
            artifacts/
            publish/

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [validate-hotfix, build-and-test]
    if: needs.validate-hotfix.outputs.is-valid == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      
      - name: Restore dependencies
        run: dotnet restore src/SimpleWeatherList.sln
      
      - name: Run security scan
        run: |
          # Install security scanning tool
          dotnet tool install --global security-scan || true
          
          # Run vulnerability check
          dotnet list src/SimpleWeatherList.sln package --vulnerable --include-transitive || echo "Security scan completed"

  create-hotfix-release:
    name: Create Hotfix Release
    runs-on: ubuntu-latest
    needs: [validate-hotfix, build-and-test, security-scan]
    if: |
      needs.validate-hotfix.outputs.is-valid == 'true' && 
      github.event_name == 'push' && 
      startsWith(github.ref, 'refs/heads/hotfix/')
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: hotfix-build-${{ needs.validate-hotfix.outputs.hotfix-version }}
          path: artifacts/
      
      - name: Load version info
        run: |
          source artifacts/version.env
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "HOTFIX_VERSION=$HOTFIX_VERSION" >> $GITHUB_ENV
          echo "BUILD_NUMBER=$BUILD_NUMBER" >> $GITHUB_ENV
          echo "COMMIT_SHA=$COMMIT_SHA" >> $GITHUB_ENV
      
      - name: Create and push tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          TAG_NAME="v${{ env.VERSION }}"
          git tag -a "$TAG_NAME" -m "Hotfix release ${{ env.HOTFIX_VERSION }} (build ${{ env.BUILD_NUMBER }})"
          git push origin "$TAG_NAME"
          
          echo "Created tag: $TAG_NAME"
      
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.VERSION }}
          release_name: Hotfix Release v${{ env.HOTFIX_VERSION }}
          body: |
            # Hotfix Release v${{ env.HOTFIX_VERSION }}
            
            **Build Information:**
            - Version: ${{ env.VERSION }}
            - Build Number: ${{ env.BUILD_NUMBER }}
            - Commit: ${{ env.COMMIT_SHA }}
            - Branch: ${{ github.ref_name }}
            
            **Changes:**
            This is a hotfix release addressing critical issues in production.
            
            **Deployment:**
            - Ready for immediate production deployment
            - Contains security and critical bug fixes
            - Backward compatible with previous minor version
            
            **Artifacts:**
            - Deployment package: hotfix-${{ env.VERSION }}.tar.gz
            - Docker image: simple-weather-list:${{ env.VERSION }}
          draft: false
          prerelease: false
      
      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/hotfix-${{ env.VERSION }}.tar.gz
          asset_name: hotfix-${{ env.VERSION }}.tar.gz
          asset_content_type: application/gzip

  merge-to-main:
    name: Auto-merge to Main
    runs-on: ubuntu-latest
    needs: [validate-hotfix, build-and-test, security-scan, create-hotfix-release]
    if: |
      needs.validate-hotfix.outputs.is-valid == 'true' && 
      github.event_name == 'push' && 
      startsWith(github.ref, 'refs/heads/hotfix/')
    
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Configure git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
      
      - name: Merge hotfix to main
        run: |
          HOTFIX_BRANCH="${{ github.ref_name }}"
          HOTFIX_VERSION="${{ needs.validate-hotfix.outputs.hotfix-version }}"
          
          # Fetch the hotfix branch
          git fetch origin $HOTFIX_BRANCH
          
          # Merge hotfix branch
          git merge origin/$HOTFIX_BRANCH --no-ff -m "Merge hotfix v$HOTFIX_VERSION into main"
          
          # Push changes
          git push origin main
          
          echo "Successfully merged $HOTFIX_BRANCH to main"
      
      - name: Delete hotfix branch
        run: |
          HOTFIX_BRANCH="${{ github.ref_name }}"
          git push origin --delete $HOTFIX_BRANCH
          echo "Deleted hotfix branch: $HOTFIX_BRANCH"

  notify-completion:
    name: Notify Hotfix Completion
    runs-on: ubuntu-latest
    needs: [validate-hotfix, build-and-test, security-scan, create-hotfix-release, merge-to-main]
    if: always()
    
    steps:
      - name: Create completion summary
        run: |
          HOTFIX_VERSION="${{ needs.validate-hotfix.outputs.hotfix-version }}"
          
          echo "## Hotfix Process Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Hotfix Version:** v$HOTFIX_VERSION" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.create-hotfix-release.result }}" == "success" ]]; then
            echo "✅ **Release Created Successfully**" >> $GITHUB_STEP_SUMMARY
            echo "- Release tagged as v$HOTFIX_VERSION" >> $GITHUB_STEP_SUMMARY
            echo "- Artifacts uploaded to release" >> $GITHUB_STEP_SUMMARY
            echo "- Ready for production deployment" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Release Creation Failed**" >> $GITHUB_STEP_SUMMARY
            echo "- Manual intervention required" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.merge-to-main.result }}" == "success" ]]; then
            echo "✅ **Auto-merge Completed**" >> $GITHUB_STEP_SUMMARY
            echo "- Hotfix merged to main branch" >> $GITHUB_STEP_SUMMARY
            echo "- Hotfix branch deleted" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Auto-merge Failed**" >> $GITHUB_STEP_SUMMARY
            echo "- Manual merge to main required" >> $GITHUB_STEP_SUMMARY
          fi
