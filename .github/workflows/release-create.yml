name: Release Creation

on:
  push:
    branches: [ 'release/*' ]
  workflow_dispatch:
    inputs:
      deploy_to_dev:
        description: 'Deploy to development environment'
        required: false
        default: true
        type: boolean

env:
  DOTNET_VERSION: '8.0.x'
  BUILD_CONFIGURATION: 'Release'
  REGISTRY: ghcr.io

jobs:
  # Validate release branch and extract release information
  validate-release:
    name: Validate Release Branch
    runs-on: ubuntu-latest
    outputs:
      release-id: ${{ steps.release-info.outputs.release-id }}
      is-valid: ${{ steps.release-info.outputs.is-valid }}
    steps:
      - name: Extract release information
        id: release-info
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          echo "Branch name: $BRANCH_NAME"
          
          # Validate release branch naming: release/YYYY-MM-DD-NN
          if [[ $BRANCH_NAME =~ ^release/([0-9]{4}-[0-9]{2}-[0-9]{2}-[0-9]+)$ ]]; then
            RELEASE_ID="${BASH_REMATCH[1]}"
            echo "release-id=$RELEASE_ID" >> $GITHUB_OUTPUT
            echo "is-valid=true" >> $GITHUB_OUTPUT
            echo "✓ Valid release branch: $BRANCH_NAME"
            echo "✓ Release ID: $RELEASE_ID"
          else
            echo "is-valid=false" >> $GITHUB_OUTPUT
            echo "❌ Invalid release branch name: $BRANCH_NAME"
            echo "Expected format: release/YYYY-MM-DD-NN (e.g., release/2024-03-15-01)"
          fi

      - name: Fail on invalid branch name
        if: steps.release-info.outputs.is-valid != 'true'
        run: |
          echo "❌ Release branch name is invalid"
          echo "Please use the format: release/YYYY-MM-DD-NN"
          echo "Example: release/2024-03-15-01"
          exit 1

  # Build and create release artifacts
  build-release:
    name: Build Release
    runs-on: ubuntu-latest
    needs: validate-release
    outputs:
      version: ${{ steps.version.outputs.version }}
      full-version: ${{ steps.version.outputs.full-version }}
      release-tag: ${{ steps.version.outputs.release-tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Get version information
        id: version
        shell: pwsh
        run: |
          $releaseId = "${{ needs.validate-release.outputs.release-id }}"
          ./.github/scripts/version-management.ps1 -Action get-build -BuildNumber ${{ github.run_number }}
          
          # Create release tag
          $versionData = Get-Content version.json -Raw | ConvertFrom-Json
          $releaseTag = "v$($versionData.version).${{ github.run_number }}"
          Write-Host "Release tag: $releaseTag"
          "release-tag=$releaseTag" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8

      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore src/SimpleWeatherList.sln

      - name: Build application
        run: |
          dotnet build src/SimpleWeatherList.sln \
            --configuration ${{ env.BUILD_CONFIGURATION }} \
            --no-restore \
            -p:Version=${{ steps.version.outputs.full-version }} \
            -p:AssemblyVersion=${{ steps.version.outputs.version }} \
            -p:FileVersion=${{ steps.version.outputs.full-version }}

      - name: Run tests
        run: |
          dotnet test src/SimpleWeatherList.sln \
            --configuration ${{ env.BUILD_CONFIGURATION }} \
            --no-build \
            --verbosity normal \
            --logger trx \
            --results-directory TestResults

      - name: Publish test results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Release Build Test Results
          path: TestResults/*.trx
          reporter: dotnet-trx

      - name: Create release artifacts
        run: |
          # Create publish directory
          mkdir -p release-artifacts
          
          # Publish the web application
          dotnet publish src/SimpleWeatherList.Web/SimpleWeatherList.Web.csproj \
            --configuration ${{ env.BUILD_CONFIGURATION }} \
            --no-build \
            --output release-artifacts/web \
            -p:Version=${{ steps.version.outputs.full-version }}

      - name: Upload release artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release-artifacts-${{ needs.validate-release.outputs.release-id }}
          path: release-artifacts/
          retention-days: 365

  # Build and push Docker images
  docker-release:
    name: Build and Push Release Docker Image
    runs-on: ubuntu-latest
    needs: [validate-release, build-release]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        run: |
          RELEASE_VERSION="${{ needs.build-release.outputs.full-version }}"
          RELEASE_TAG="${{ needs.build-release.outputs.release-tag }}"
          IMAGE_NAME="${{ env.REGISTRY }}/${{ github.repository_owner }}/simpleweatherlist.web"
          
          echo "Building Docker image with version: $RELEASE_VERSION"
          echo "Image tags: $RELEASE_VERSION, $RELEASE_TAG, latest"
          
          # Build and push with version tag
          dotnet publish src/SimpleWeatherList.Web/SimpleWeatherList.Web.csproj \
            -c ${{ env.BUILD_CONFIGURATION }} \
            -p:PublishProfile=DefaultContainer \
            -p:ContainerRegistry=${{ env.REGISTRY }} \
            -p:ContainerRepository=${{ github.repository_owner }}/simpleweatherlist.web \
            -p:ContainerImageTag=$RELEASE_VERSION \
            -p:Version=$RELEASE_VERSION

      - name: Tag additional versions
        run: |
          RELEASE_VERSION="${{ needs.build-release.outputs.full-version }}"
          RELEASE_TAG="${{ needs.build-release.outputs.release-tag }}"
          IMAGE_NAME="${{ env.REGISTRY }}/${{ github.repository_owner }}/simpleweatherlist.web"
          
          # Pull the image we just built
          docker pull $IMAGE_NAME:$RELEASE_VERSION
          
          # Tag with release tag
          docker tag $IMAGE_NAME:$RELEASE_VERSION $IMAGE_NAME:$RELEASE_TAG
          docker push $IMAGE_NAME:$RELEASE_TAG
          
          # Tag as latest
          docker tag $IMAGE_NAME:$RELEASE_VERSION $IMAGE_NAME:latest
          docker push $IMAGE_NAME:latest
          
          echo "✅ Docker images pushed:"
          echo "  - $IMAGE_NAME:$RELEASE_VERSION"
          echo "  - $IMAGE_NAME:$RELEASE_TAG"
          echo "  - $IMAGE_NAME:latest"

  # Create GitHub release
  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-release, docker-release]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate release notes
        id: release-notes
        run: |
          RELEASE_ID="${{ needs.validate-release.outputs.release-id }}"
          RELEASE_TAG="${{ needs.build-release.outputs.release-tag }}"
          
          # Generate release notes (this could be enhanced with automated changelog generation)
          cat > release-notes.md << EOF
          # Release $RELEASE_TAG
          
          ## 📦 Release Information
          - **Release ID**: $RELEASE_ID
          - **Version**: ${{ needs.build-release.outputs.full-version }}
          - **Build Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          - **Branch**: ${GITHUB_REF#refs/heads/}
          - **Commit**: ${{ github.sha }}
          
          ## 🚀 Docker Images
          - \`${{ env.REGISTRY }}/${{ github.repository_owner }}/simpleweatherlist.web:${{ needs.build-release.outputs.full-version }}\`
          - \`${{ env.REGISTRY }}/${{ github.repository_owner }}/simpleweatherlist.web:$RELEASE_TAG\`
          - \`${{ env.REGISTRY }}/${{ github.repository_owner }}/simpleweatherlist.web:latest\`
          
          ## 📋 Changes
          _Release notes would be generated from commit history or changelog_
          
          ## 🔧 Deployment
          This release is ready for deployment to configured environments.
          EOF
          
          echo "Release notes generated:"
          cat release-notes.md

      - name: Create GitHub Release
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const releaseNotes = fs.readFileSync('release-notes.md', 'utf8');
            
            const release = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: "${{ needs.build-release.outputs.release-tag }}",
              target_commitish: context.sha,
              name: "Release ${{ needs.build-release.outputs.release-tag }}",
              body: releaseNotes,
              draft: false,
              prerelease: false
            });
            
            console.log(`✅ Release created: ${release.data.html_url}`);
            
            // Set output for subsequent jobs
            core.setOutput('release-id', release.data.id);
            core.setOutput('release-url', release.data.html_url);

  # Optional deployment to development environment
  deploy-to-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [validate-release, build-release, docker-release, create-github-release]
    if: ${{ inputs.deploy_to_dev != false }}  # Deploy by default unless explicitly disabled
    environment: development
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to development environment
        run: |
          RELEASE_VERSION="${{ needs.build-release.outputs.full-version }}"
          IMAGE_NAME="${{ env.REGISTRY }}/${{ github.repository_owner }}/simpleweatherlist.web:$RELEASE_VERSION"
          
          echo "🚀 Deploying to development environment"
          echo "Image: $IMAGE_NAME"
          echo "Version: $RELEASE_VERSION"
          
          # This would contain actual deployment logic
          # For now, this is a placeholder
          echo "✅ Development deployment completed"

      - name: Run smoke tests
        run: |
          echo "🧪 Running smoke tests on development environment"
          # This would contain actual smoke test logic
          echo "✅ Smoke tests passed"

  # Summary job
  release-summary:
    name: Release Summary
    runs-on: ubuntu-latest
    needs: [validate-release, build-release, docker-release, create-github-release, deploy-to-dev]
    if: always()
    steps:
      - name: Determine overall result
        id: result
        run: |
          BUILD_RESULT="${{ needs.build-release.result }}"
          DOCKER_RESULT="${{ needs.docker-release.result }}"
          RELEASE_RESULT="${{ needs.create-github-release.result }}"
          DEPLOY_RESULT="${{ needs.deploy-to-dev.result }}"
          
          echo "Build: $BUILD_RESULT"
          echo "Docker: $DOCKER_RESULT"
          echo "GitHub Release: $RELEASE_RESULT"
          echo "Development Deploy: $DEPLOY_RESULT"
          
          if [[ "$BUILD_RESULT" != "success" ]] || [[ "$DOCKER_RESULT" != "success" ]] || [[ "$RELEASE_RESULT" != "success" ]]; then
            echo "overall-result=failure" >> $GITHUB_OUTPUT
            echo "❌ Release creation failed"
          elif [[ "$DEPLOY_RESULT" == "failure" ]]; then
            echo "overall-result=partial" >> $GITHUB_OUTPUT
            echo "⚠️ Release created but development deployment failed"
          else
            echo "overall-result=success" >> $GITHUB_OUTPUT
            echo "✅ Release created successfully"
          fi

      - name: Create summary
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            
            const buildResult = "${{ needs.build-release.result }}";
            const dockerResult = "${{ needs.docker-release.result }}";
            const releaseResult = "${{ needs.create-github-release.result }}";
            const deployResult = "${{ needs.deploy-to-dev.result }}";
            const overallResult = "${{ steps.result.outputs.overall-result }}";
            
            const getEmoji = (result) => {
              if (result === 'success') return '✅';
              if (result === 'failure') return '❌';
              if (result === 'skipped') return '⏭️';
              return '⚠️';
            };
            
            let summary = `# 🎉 Release Creation Results\n\n`;
            summary += `**Release ID:** \`${{ needs.validate-release.outputs.release-id }}\`\n`;
            summary += `**Version:** \`${{ needs.build-release.outputs.full-version }}\`\n`;
            summary += `**Release Tag:** \`${{ needs.build-release.outputs.release-tag }}\`\n`;
            summary += `**Overall Result:** ${getEmoji(overallResult)} ${overallResult}\n\n`;
            
            summary += `## Release Steps\n\n`;
            summary += `| Step | Status |\n`;
            summary += `|------|--------|\n`;
            summary += `| Build & Test | ${getEmoji(buildResult)} ${buildResult} |\n`;
            summary += `| Docker Build | ${getEmoji(dockerResult)} ${dockerResult} |\n`;
            summary += `| GitHub Release | ${getEmoji(releaseResult)} ${releaseResult} |\n`;
            summary += `| Dev Deployment | ${getEmoji(deployResult)} ${deployResult} |\n`;
            
            summary += `\n## 📦 Artifacts\n\n`;
            summary += `- **Docker Images:**\n`;
            summary += `  - \`${{ env.REGISTRY }}/${{ github.repository_owner }}/simpleweatherlist.web:${{ needs.build-release.outputs.full-version }}\`\n`;
            summary += `  - \`${{ env.REGISTRY }}/${{ github.repository_owner }}/simpleweatherlist.web:${{ needs.build-release.outputs.release-tag }}\`\n`;
            summary += `  - \`${{ env.REGISTRY }}/${{ github.repository_owner }}/simpleweatherlist.web:latest\`\n`;
            
            summary += `\n**Workflow Run:** [\`${{ github.run_id }}\`](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\n`;
            
            // Write to GitHub Step Summary
            fs.appendFileSync(process.env.GITHUB_STEP_SUMMARY, summary);

      - name: Notify on failure
        if: steps.result.outputs.overall-result == 'failure'
        run: |
          echo "❌ Release creation failed"
          exit 1
