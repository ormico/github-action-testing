name: Feature Branch Build

on:
  workflow_dispatch:
    inputs:
      create_preview:
        description: 'Create preview release'
        required: false
        default: false
        type: boolean
      preview_suffix:
        description: 'Custom preview suffix (optional)'
        required: false
        default: ''
        type: string

env:
  DOTNET_VERSION: '8.0.x'
  BUILD_CONFIGURATION: 'Release'
  REGISTRY: ghcr.io

jobs:
  # Build and test the feature branch
  build-and-test:
    name: Build and Test Feature Branch
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      full-version: ${{ steps.version.outputs.full-version }}
      preview-version: ${{ steps.preview.outputs.preview-version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Get branch information
        id: branch
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          BRANCH_HASH=$(echo $BRANCH_NAME | git hash-object --stdin | cut -c1-8)
          echo "branch-name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "branch-hash=$BRANCH_HASH" >> $GITHUB_OUTPUT
          echo "Branch: $BRANCH_NAME (hash: $BRANCH_HASH)"

      - name: Get version information
        id: version
        shell: pwsh
        run: |
          ./.github/scripts/version-management.ps1 -Action get-build -BuildNumber ${{ github.run_number }}

      - name: Create preview version
        id: preview
        if: ${{ inputs.create_preview }}
        shell: pwsh
        run: |
          $previewSuffix = "${{ inputs.preview_suffix }}"
          if (-not $previewSuffix) {
              $branchHash = "${{ steps.branch.outputs.branch-hash }}"
              $previewSuffix = "preview-$branchHash-$('{0:D2}' -f ${{ github.run_number }})"
          }
          
          ./.github/scripts/version-management.ps1 -Action set-preview -PreviewSuffix $previewSuffix -BuildNumber ${{ github.run_number }}

      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore src/SimpleWeatherList.sln

      - name: Build application
        run: |
          VERSION_TO_USE="${{ steps.preview.outputs.preview-version || steps.version.outputs.full-version }}"
          echo "Building with version: $VERSION_TO_USE"
          
          dotnet build src/SimpleWeatherList.sln \
            --configuration ${{ env.BUILD_CONFIGURATION }} \
            --no-restore \
            -p:Version=$VERSION_TO_USE \
            -p:AssemblyVersion=${{ steps.version.outputs.version }} \
            -p:FileVersion=$VERSION_TO_USE

      - name: Run unit tests
        run: |
          dotnet test src/SimpleWeatherList.sln \
            --configuration ${{ env.BUILD_CONFIGURATION }} \
            --no-build \
            --verbosity normal \
            --logger trx \
            --results-directory TestResults \
            --collect:"XPlat Code Coverage"

      - name: Publish test results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Feature Branch Test Results
          path: TestResults/*.trx
          reporter: dotnet-trx

      - name: Upload build artifacts
        if: ${{ inputs.create_preview }}
        uses: actions/upload-artifact@v3
        with:
          name: feature-build-artifacts
          path: |
            src/SimpleWeatherList.Web/bin/${{ env.BUILD_CONFIGURATION }}/net8.0/
          retention-days: 30

  # Create and push Docker image for preview releases
  docker-build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: build-and-test
    if: ${{ inputs.create_preview }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        run: |
          PREVIEW_VERSION="${{ needs.build-and-test.outputs.preview-version }}"
          IMAGE_NAME="${{ env.REGISTRY }}/${{ github.repository_owner }}/simpleweatherlist.web"
          
          echo "Building Docker image with version: $PREVIEW_VERSION"
          echo "Image name: $IMAGE_NAME:$PREVIEW_VERSION"
          
          dotnet publish src/SimpleWeatherList.Web/SimpleWeatherList.Web.csproj \
            -c ${{ env.BUILD_CONFIGURATION }} \
            -p:PublishProfile=DefaultContainer \
            -p:ContainerRegistry=${{ env.REGISTRY }} \
            -p:ContainerRepository=${{ github.repository_owner }}/simpleweatherlist.web \
            -p:ContainerImageTag=$PREVIEW_VERSION \
            -p:Version=$PREVIEW_VERSION

      - name: Create image manifest
        run: |
          PREVIEW_VERSION="${{ needs.build-and-test.outputs.preview-version }}"
          IMAGE_NAME="${{ env.REGISTRY }}/${{ github.repository_owner }}/simpleweatherlist.web"
          
          cat > image-manifest.json << EOF
          {
            "image": "$IMAGE_NAME:$PREVIEW_VERSION",
            "version": "$PREVIEW_VERSION",
            "branch": "${{ steps.branch.outputs.branch-name }}",
            "commit": "${{ github.sha }}",
            "build_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "build_number": "${{ github.run_number }}",
            "workflow_run": "${{ github.run_id }}"
          }
          EOF
          
          echo "Image manifest:"
          cat image-manifest.json

      - name: Upload image manifest
        uses: actions/upload-artifact@v3
        with:
          name: docker-manifest
          path: image-manifest.json
          retention-days: 90

  # Security and quality checks for preview releases
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test
    if: ${{ inputs.create_preview }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore src/SimpleWeatherList.sln

      - name: Run dependency vulnerability check
        run: |
          echo "Checking for vulnerable dependencies..."
          dotnet list src/SimpleWeatherList.sln package --vulnerable --include-transitive || true

      - name: Container security scan
        if: ${{ inputs.create_preview }}
        run: |
          echo "Container security scan would run here"
          echo "Preview version: ${{ needs.build-and-test.outputs.preview-version }}"

  # Deployment test (dry run)
  deployment-test:
    name: Deployment Test
    runs-on: ubuntu-latest
    needs: [build-and-test, docker-build-and-push]
    if: ${{ inputs.create_preview && always() && needs.docker-build-and-push.result == 'success' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Test deployment configuration
        run: |
          echo "Testing deployment configuration for preview release"
          echo "Preview version: ${{ needs.build-and-test.outputs.preview-version }}"
          echo "Image: ${{ env.REGISTRY }}/${{ github.repository_owner }}/simpleweatherlist.web:${{ needs.build-and-test.outputs.preview-version }}"
          
          # This would contain actual deployment validation logic
          echo "✓ Deployment configuration is valid"

  # Summary job
  feature-build-summary:
    name: Feature Build Summary
    runs-on: ubuntu-latest
    needs: [build-and-test, docker-build-and-push, security-scan, deployment-test]
    if: always()
    steps:
      - name: Determine overall result
        id: result
        run: |
          BUILD_RESULT="${{ needs.build-and-test.result }}"
          DOCKER_RESULT="${{ needs.docker-build-and-push.result }}"
          SECURITY_RESULT="${{ needs.security-scan.result }}"
          DEPLOY_RESULT="${{ needs.deployment-test.result }}"
          
          echo "Build and Test: $BUILD_RESULT"
          echo "Docker Build: $DOCKER_RESULT"
          echo "Security Scan: $SECURITY_RESULT"
          echo "Deployment Test: $DEPLOY_RESULT"
          
          # Build and test must succeed
          if [[ "$BUILD_RESULT" != "success" ]]; then
            echo "overall-result=failure" >> $GITHUB_OUTPUT
            echo "❌ Build and test failed"
            exit 0
          fi
          
          # If preview was requested, other jobs must succeed or be skipped
          if [[ "${{ inputs.create_preview }}" == "true" ]]; then
            if [[ "$DOCKER_RESULT" == "failure" ]] || [[ "$SECURITY_RESULT" == "failure" ]] || [[ "$DEPLOY_RESULT" == "failure" ]]; then
              echo "overall-result=failure" >> $GITHUB_OUTPUT
              echo "❌ Preview release failed"
              exit 0
            fi
            echo "overall-result=success" >> $GITHUB_OUTPUT
            echo "✅ Preview release created successfully"
          else
            echo "overall-result=success" >> $GITHUB_OUTPUT
            echo "✅ Feature branch build completed successfully"
          fi

      - name: Create summary comment
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            
            const buildResult = "${{ needs.build-and-test.result }}";
            const dockerResult = "${{ needs.docker-build-and-push.result }}";
            const securityResult = "${{ needs.security-scan.result }}";
            const deployResult = "${{ needs.deployment-test.result }}";
            const overallResult = "${{ steps.result.outputs.overall-result }}";
            const createPreview = "${{ inputs.create_preview }}" === "true";
            const previewVersion = "${{ needs.build-and-test.outputs.preview-version }}";
            
            const getEmoji = (result) => {
              if (result === 'success') return '✅';
              if (result === 'failure') return '❌';
              if (result === 'skipped') return '⏭️';
              return '⚠️';
            };
            
            let summary = `# 🚀 Feature Branch Build Results\n\n`;
            summary += `**Branch:** \`${{ github.ref_name }}\`\n`;
            summary += `**Overall Result:** ${getEmoji(overallResult)} ${overallResult}\n\n`;
            
            summary += `## Build Steps\n\n`;
            summary += `| Step | Status |\n`;
            summary += `|------|--------|\n`;
            summary += `| Build & Test | ${getEmoji(buildResult)} ${buildResult} |\n`;
            
            if (createPreview) {
              summary += `| Docker Build | ${getEmoji(dockerResult)} ${dockerResult} |\n`;
              summary += `| Security Scan | ${getEmoji(securityResult)} ${securityResult} |\n`;
              summary += `| Deployment Test | ${getEmoji(deployResult)} ${deployResult} |\n`;
              
              if (previewVersion) {
                summary += `\n## 📦 Preview Release\n\n`;
                summary += `**Version:** \`${previewVersion}\`\n`;
                summary += `**Image:** \`${{ env.REGISTRY }}/${{ github.repository_owner }}/simpleweatherlist.web:${previewVersion}\`\n`;
              }
            }
            
            summary += `\n**Workflow Run:** [\`${{ github.run_id }}\`](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\n`;
            
            // Write to GitHub Step Summary
            fs.appendFileSync(process.env.GITHUB_STEP_SUMMARY, summary);

      - name: Notify on failure
        if: steps.result.outputs.overall-result == 'failure'
        run: |
          echo "❌ Feature branch build failed"
          exit 1
